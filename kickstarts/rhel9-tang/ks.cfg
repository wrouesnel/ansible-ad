# RHEL 9 Tang Server for an enterprise-level network decryption story. Our model
# requires us to deploy this server first, since it will be used to provide
# network based decryption support to everything else.
# This instance will encrypt against the TPM on boot, and generate a recovery
# password and store it in /root. You *must* back this password up ASAP.

#version=RHEL9
# Use graphical install
graphical
repo --name="AppStream" --baseurl=file:///run/install/sources/mount-0000-cdrom/AppStream

%addon com_redhat_kdump --disable

%end

%addon com_redhat_oscap
    content-type = scap-security-guide
    datastream-id = scap_org.open-scap_datastream_from_xccdf_ssg-rhel9-xccdf.xml
    xccdf-id = scap_org.open-scap_cref_ssg-rhel9-xccdf.xml
    profile = xccdf_org.ssgproject.content_profile_stig
%end

# Keyboard layouts
keyboard --xlayouts='au'
# System language
lang en_AU.UTF-8

# Network information
network  --bootproto=static --device=ens3 --gateway=192.168.122.1 --ip=192.168.122.3 --nameserver=192.168.122.2 --netmask=255.255.255.0 --noipv6 --activate --ipv4-dns-search=default.libvirt
network  --hostname=tang

# Use CDROM installation media
cdrom

%packages
# Server product
@^server-product-environment
aide
audispd-plugins
audit
chrony
cronie
crypto-policies
fapolicyd
firewalld
gnutls-utils
libreswan
nss-tools
opensc
openscap
openscap-scanner
openssh-clients
openssh-server
openssl-pkcs11
pcsc-lite
policycoreutils
policycoreutils-python-utils
rng-tools
rsyslog
rsyslog-gnutls
s-nail
scap-security-guide
subscription-manager
sudo
usbguard
-iprutils
-nfs-utils
-quagga
-rsh-server
-sendmail
-telnet-server
-tftp-server
-tuned
-vsftpd
-xorg-x11-server-Xorg
-xorg-x11-server-Xwayland
-xorg-x11-server-common
-xorg-x11-server-utils
-ypserv
# TPM
tpm2-tss
tpm2-pkcs11
# Test Environment Helpers
qemu-guest-agent
# Application Specialization
tang
%end

# Run the Setup Agent on first boot
firstboot --disable

# Generated using Blivet version 3.6.0
ignoredisk --only-use=vda
# Partition clearing information
clearpart --none --initlabel
# Disk partitioning information
part /boot/efi --fstype="efi" --ondisk=vda --size=2048 --fsoptions="umask=0077,shortname=winnt"
part pv.342 --fstype="lvmpv" --ondisk=vda --size=98302 --encrypted --passphrase=defaultpassword --luks-version=luks2
part /boot --fstype="xfs" --ondisk=vda --size=2048
volgroup rhel --pesize=4096 pv.342
logvol /var/log --fstype="xfs" --size=2048 --name=var_log --vgname=rhel
logvol / --fstype="xfs" --size=40960 --name=root --vgname=rhel
logvol /var --fstype="xfs" --size=30720 --name=var --vgname=rhel
logvol /var/log/audit --fstype="xfs" --size=10240 --name=var_log_audit --vgname=rhel
logvol /var/tmp --fstype="xfs" --size=2048 --name=var_tmp --vgname=rhel
logvol /home --fstype="xfs" --size=10232 --name=home --vgname=rhel
logvol /tmp --fstype="xfs" --size=2048 --name=tmp --vgname=rhel

# System timezone
timezone Australia/Sydney --utc

# Root password
# Don't do in production - auto-realm join or define cert trusted keys.
rootpw --plaintext defaultpassword

# Firewall
firewall --enabled --service=ssh --service=http

# Reboot when the install is finished.
reboot

%post --interpreter=/bin/bash
 echo "Check for OEMDRV"
if [ -e /dev/disk/by-label/OEMDRV ]; then
    echo "Create /mnt/OEMDRV"
    mkdir /mnt/OEMDRV
    echo "Mount OEMDRV"
    if ! mount /dev/disk/by-label/OEMDRV /mnt/OEMDRV; then
        echo "Could not mount OEMDRV"
        exit 1
    fi
fi

# Disable first-boot password aging
chage -I -1 -m 0 -M -1 -E -1 root

# Ensure PermitRootLogin is on in sshd (security policy disables it but then we can't provision)
sed -i 's/PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*

# Convert the LUKS encrypted volume to be encrypted with the TPM, set to
# PCR 7 - this locks the hard disk to the machine it is plugged into.

echo "Create /etc/dracut.conf.d/10-tpm.conf"
cat << EOF > /etc/dracut.conf.d/10-bash.conf
add_dracutmodules+=" bash "
EOF

cat << EOF > /etc/dracut.conf.d/10-tpm.conf
add_dracutmodules+=" tpm2-tss "
install_items+=" /etc/crypttab "
EOF

# Find LUKS volumes
luks_devices=()
while read -r blockdev; do
    if cryptsetup luksDump "${blockdev}"; then
        luks_devices+=( "$blockdev" )
    fi
done < <( find /dev/disk/by-uuid )

# Rebuild crypttab
printf "# TARGET\tSOURCE\tKEYFILE\tOPTIONS\n" > /etc/crypttab
for blockdev in "${luks_devices[@]}"; do
    uuid="$(basename "$blockdev")"
    # Enroll with TPM and wipe the encryption keys
    PASSWORD="defaultpassword" systemd-cryptenroll --wipe-slot=0 --tpm2-device=auto --tpm2-pcrs=7 "${blockdev}"
    printf "%s\t%s\t%s\t%s\n" \
        "luks-${uuid}" "UUID=$(basename "$blockdev")" "none" "tpm-device=auto,luks,discard" \
        >> /etc/crypttab 
done

echo "Rebuild dracut.conf"
dracut -fv --regenerate-all

# Application specialization
semanage port -a -t tangd_port_t -p tcp 80
systemctl enable tangd.socket
# Create an initial set of tang keys
/usr/libexec/tangd-keygen /var/db/tang
# Start the tangd socket
systemctl start tangd.socket

TANG_THP="$(tang-show-keys | head -n1)"

# Write a tang.env file to the root folder
cat << EOF > /root/tang.env
export TANG_SERVER=http://tang.default.libvirt
export TANG_THP=$TANG_THP
EOF


# Write the key thumbprints to any listening serial port
for serial_device in /dev/ttyS*; do
    stty -F "$serial_device" 115200 cs8 -cstopb -parenb
done
for serial_device in /dev/ttyS*; do
    cat << EOF > "${serial_device}"
--BEGIN TANG ENV--
$(cat /root/tang.env)
--END TANG ENV--
EOF
done

%end