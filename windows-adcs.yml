- hosts: adcs_servers
  #become: yes
  tasks:
  - name: Install required features
    ansible.windows.win_feature:
      name: 
      - ADCS-Cert-Authority
      - ADCS-Enroll-Web-Pol
      - ADCS-Enroll-Web-Svc
      - ADCS-Web-Enrollment
      - ADCS-Device-Enrollment
      - ADCS-Online-Cert
      - Web-Server
      - RSAT-AD-PowerShell
      include_management_tools: true
      state: present

  - name: Check for existing certificate authority
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        Import-Module ActiveDirectory
        $rootDse = Get-ADRootDSE
        [array]$domain_cas = Get-ChildItem "AD:CN=Certification Authorities,CN=Public Key Services,CN=Services,$($rootDse.configurationNamingContext)" | `
          Select -ExpandProperty Name

        $Ansible.result = $domain_cas
    delegate_to: "{{ groups['ad_servers'] | first }}"
    run_once: true
    register: existing_cas
    changed_when: false

  - name: Determine CA name
    set_fact:
      ca_name: "{{ad.domain_name}} Root CA"

  - name: Install Active Directory Certificate Services
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        Install-AdcsCertificationAuthority -CAType EnterpriseRootCa `
          -CACommonName "{{ad.domain_name}} Root CA" `
          -CADistinguishedNameSuffix "{{ad_dc}}" `
          -HashAlgorithmName SHA512 `
          -KeyLength 4096 `
          -ValidityPeriod Years `
          -ValidityPeriodUnits 20 `
          -Force
    when: not (ca_name in existing_cas.result)

  - name: Check for existing certificate authority
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        [CmdletBinding()]
        param (
            [String]
            $CAName
        )
        Import-Module ActiveDirectory
        $rootDse = Get-ADRootDSE
        $adConfigurationPath = (Get-ADRootDSE).configurationNamingContext

        $certificates=(Get-ADObject `
          -SearchBase "CN=Certification Authorities,CN=Public Key Services,CN=Services,$adConfigurationPath" `
          -Properties cACertificate `
          -Filter 'Name -eq "default.libvirt Root CA"').cACertificate

        function ConvertTo-Base64 ([System.Byte[]] $Byte)
        {
            $straight = [System.Convert]::ToBase64String($Byte)

            # Convert the string to base64 junks with a maximum length of 64
            # characters per line.
            $formatted = [System.Text.StringBuilder]::new()
            for ($i = 0; $i -lt $straight.Length; $i += 64)
            {
                $formatted.AppendLine($straight.Substring($i, [System.Math]::Min(64, $straight.Length - $i))) | Out-Null
            }

            # Remove the new lines for the last empty line and store it as a simple
            # string with newlines, no string array.
            $formattedString = $formatted.ToString().TrimEnd("`n`r")

            return $formattedString
        }

        # Return base64 encoded CA certificates
        $Ansible.result = $certificates | % { 
            $certificate = [System.Security.Cryptography.X509Certificates.X509Certificate]::new($_)
            $certificateBytes  = $certificate.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert)
            $certificateBase64 = ConvertTo-Base64 -Byte $certificateBytes

            $outStringBuilder = [System.Text.StringBuilder]::new()
            $outStringBuilder.AppendLine("-----BEGIN CERTIFICATE-----") | Out-Null
            $outStringBuilder.AppendLine($certificateBase64) | Out-Null
            $outStringBuilder.Append("-----END CERTIFICATE-----") | Out-Null

            $outStringBuilder.ToString()
        }
      parameters:
        CAName: "{{ad.domain_name}} Root CA"
    delegate_to: "{{ groups['ad_servers'] | first }}"
    run_once: true
    register: current_ca_certificates
    changed_when: false

  - name: Save a concatenated trusted CA root
    copy:
      # This construct makes our lineendings generic
      content: |
        {% for certificate in current_ca_certificates.result %}
        {% for line in certificate.split("\n") %}
        {{line|trim}}
        {% endfor %}

        {% endfor %}
      dest: "{{ca_name|replace(' ','-')|replace('.', '_') }}.crt"
    connection: local
    delegate_to: localhost
    become: false

  # TODO: the win_acl setting should be able to handle this.
  - name: Ensure Domain Computers can use the Web Server template
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        Import-Module ActiveDirectory
        Import-Module ADCSTemplate

        # This module is so good it just works!
        Set-ADCSTemplateACL -DisplayName "Web Server" -Identity "Domain Computers" -Enroll -AutoEnroll

  - name: Check for certificates for serving off this host
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        [CmdletBinding()]
        param (
            [String]
            $InventoryHostname,
            [String]
            $Domain
        )
        $today = [DateTime]::Now
        $certificate = Get-ChildItem -Path Cert:LocalMachine\MY | Where-Object {
          ($_.DnsNameList -contains $InventoryHostname) -and $_.NotAfter -gt $today
        } | Sort-Object NotAfter | Select-Object -Last 1

        if ( $certificate -eq $null ) {
          $certificate = Get-Certificate `
            -Template "WebServer" `
            -DnsName $InventoryHostname, "pki.$Domain" `
            -CertStoreLocation "Cert:LocalMachine\MY"
          $Ansible.Changed = $true
        } else {
          $Ansible.Changed = $false
        }
        $Ansible.result = $certificate.Thumbprint
      parameters:
        InventoryHostname: "{{inventory_hostname}}"
        Domain: "{{ad.domain_name}}"
    register: host_certificate_thumbprint

  - name: Install the ADCS Enrollment Policy Web Service 
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        [CmdletBinding()]
        param (
            [String]
            $certThumbprint
        )
        # Policy service
        try {
          Install-AdcsEnrollmentPolicyWebService `
            -AuthenticationType Kerberos `
            -SSLCertThumbprint $certThumbprint `
            -Force
          $Ansible.Changed = $true
        } catch {
          if ($_.Exception.ErrorString.StartsWith("Setup could not add this role service because it already exists in the default Web site.")) {
            $Ansible.Failed = $false
            $Ansible.Changed = $false
          } else {
            throw $_.Exception
          }
        }
      parameters:
        certThumbprint: "{{host_certificate_thumbprint.result}}"

  - name: Ensure KDS root key exists
    win_kdsrootkey:
    delegate_to: "{{ groups.ad_servers | first }}"
    run_once: true

  - name: Install the ADCS Enrollment Web Service
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        [CmdletBinding()]
        param (
            [String]
            $certThumbprint,
            [String]
            $caHost,
            [String]
            $caName
        )
        try {
          Install-AdcsEnrollmentWebService `
              -CAConfig "$caHost\$caName" `
              -SSLCertThumbprint $certThumbprint `
              -AuthenticationType Kerberos `
              -Force
        } catch {
          if ($_.Exception.ErrorString.StartsWith("Setup could not add this role service because it already exists in the default Web site.")) {
            $Ansible.Failed = $false
            $Ansible.Changed = $false
          } else {
            throw $_.Exception
          }
        }
      parameters:
        certThumbprint: "{{host_certificate_thumbprint.result}}"
        caHost: "{{inventory_hostname}}"
        caName: "{{ existing_cas.result | first }}"

  - name: Install the ADCS Online Responder
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        try {
          Install-AdcsOnlineResponder `
              -Force
        } catch {
          if ($_.Exception.ErrorString.StartsWith("Setup could not add this role service because it already exists in the default Web site.")) {
            $Ansible.Failed = $false
            $Ansible.Changed = $false
          } else {
            throw $_.Exception
          }
        }

  # These are a good idea but just about impossible to default install with, which makes management a total pain.
  # - name: Ensure a service account for the NDES enrollment service exists
  #   microsoft.ad.service_account:
  #     identity: "{{ad_cs.ndes_service_account}}"
  #     dns_hostname: "{{ad_cs.ndes_service_account}}.{{ad.domain_name}}"
  #     description: GMSA for CEP
  #     state: present
  #     allowed_to_retrieve_password:
  #       add:
  #       - "{{ ansible_env.COMPUTERNAME }}$"

  # - name: Install the ADCS Network Device Enrollment Web Service
  #   ansible.windows.win_powershell:
  #     error_action: stop
  #     script: |
  #       [CmdletBinding()]
  #       param (
  #           [String]
  #           $certThumbprint,
  #           [String]
  #           $caHost,
  #           [String]
  #           $caName
  #       )
  #       try {
  #         Install-AdcsNetworkDeviceEnrollmentService `
  #             -CAConfig "$caHost\$caName" `
  #             -ApplicationPoolIdentity `
  #             -Force
  #       } catch {
  #         if ($_.Exception.ErrorString.StartsWith("Setup could not add this role service because it already exists in the default Web site.")) {
  #           $Ansible.Failed = $false
  #           $Ansible.Changed = $false
  #         } else {
  #           throw $_.Exception
  #         }
  #       }
  #     parameters:
  #       caHost: "{{inventory_hostname}}"
  #       caName: "{{ existing_cas.result | first }}"

  # - name: Install group managed service account
  #   ansible.windows.win_powershell:
  #     error_action: stop
  #     script: |
  #       Install-ADServiceAccount "{{ad_cs.cep_service_account}}"

  # - name: Add the group managed service account to IIS_IUSRS
  #   ansible.windows.win_group_membership:
  #     name: IIS_IUSRS
  #     members:
  #     - "{{ad_cs.cep_service_account}}@{{ad.domain_name}}"
  #     state: present